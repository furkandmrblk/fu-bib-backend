type BaseError implements Error {
  message: String!
}

interface Error {
  message: String!
}

type Library {
  adress: String!
  email: String!
  floor: [String!]!
  id: ID!
  name: String!
  section: String!
  table: [Table!]!
  website: String
}

type Mutation {
  bookTable(input: bookingInput!): MutationBookTableResult!
  deleteUser: User!
  endBooking: Table!
  extendTable: MutationExtendTableResult!
  leaveTable: Table!
  signIn(input: userInput!): MutationSignInResult!
  signOut: Result!
  signUp(input: userInput!): MutationSignUpResult!
  strikeUser: User!
  validateBooking: Table!
}

union MutationBookTableResult = BaseError | MutationBookTableSuccess | ZodError

type MutationBookTableSuccess {
  data: Table!
}

union MutationExtendTableResult = BaseError | MutationExtendTableSuccess | ZodError

type MutationExtendTableSuccess {
  data: Table!
}

union MutationSignInResult = BaseError | MutationSignInSuccess | ZodError

type MutationSignInSuccess {
  data: User!
}

union MutationSignUpResult = BaseError | MutationSignUpSuccess | ZodError

type MutationSignUpSuccess {
  data: User!
}

type Query {
  getCurrentUser: User!
  getLibraries: [Library!]!
  getLibrary(name: String!): Library!
  getTable(identifier: String!): Table!
}

enum Result {
  SUCCESS
}

type Table {
  booked: Boolean!
  floor: String!
  id: ID!
  identifier: String!
  library: Library!
  libraryName: String!
  order: Int!
  time: Float
  userId: String
}

type User {
  booked: Boolean!
  date: Float!
  email: String!
  extensions: Int
  id: ID!
  major: String
  mostUsedLibrary: String
  mostUsedTable: String
  name: String
  password: String!
  reservations: Int
  softban: Boolean!
  strikes: Int
}

type ZodError implements Error {
  fieldErrors: [ZodFieldError!]!
  message: String!
}

type ZodFieldError {
  message: String!
  path: [String!]!
}

input bookingInput {
  identifier: String!
}

input userInput {
  confirmPassword: String
  email: String!
  password: String!
}
